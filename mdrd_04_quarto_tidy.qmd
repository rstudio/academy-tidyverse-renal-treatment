---
title: "Tidy and join tables"
format: html
---

# Instructions

This week you learned about tidying and joining data sets with the tidyr (pronounced tidy-R) and dplyr packages.

Joining data sets can be deceptively tricky. It is important to keep in mind that prepping and inspecting the tables you're working with *before* you do a join is often more important (and takes more time) than doing the join itself.

You'll use some of these skills in the milestone to the right.

To learn more about the variables contained in the data set(s), refer to the data dictionary: https://rsacdn.link/milestones/internal/v2/tidyverse/renal-treatment/assets/mdrd_dictionary.html

# Milestone

```{r}
#| label: setup
#| include: false
.groups <-  c("class", "groups")

# Load your packages here

```

## Tidy and join

In this milestone, you'll check create a tidy version of `mdrd` and join the result with another data set that contains additional patient information. To do this, you'll need to use the data in  `supp.csv` alongside the data you've been using in `mdrd.csv`. Both data sets are stored in your `data/` directory.

## Recreation

### Part 1 - Import

Before you begin, you will need to import your data sets. Use the code chunk below to read two data sets from the `data/` directory:

1. `mdrd.csv`, save it as `mdrd`
2. `supp.csv`, save it as `supp`

```{r}
#| label: recreation-import

```

### Part 2 - Join tables

Consider the following variables in `mdrd`:

-   `dietl_normbp`
-   `dietl_lowbb`
-   `dietk_normbp`
-   `dietk_lowbp`

These variables indicate diet and blood pressure regimens (low-protein or very low-protein diet, and low or normal blood pressure), and take the value of `1` if a patient was assigned to that particular regimen, and a `0` otherwise.

We want to reshape the data to communicate which of the four treatments a patient received in a single column.

Run the code below to see a table.

```{r}
#| label: recreate-this
#| message: false
solution <- readr::read_csv("data/milestone04.csv")
solution
```

Your task is to use what you've learned about the dplyr package to transform `mdrd` into this table. To recreate the table above you will need to: 

1. Reshape `mdrd` to create two new columns called `treatment` and `value` by pivoting the `dietl_normbp`, `dietl_lowbp`, `dietk_normbp`, `dietk_lowbp` columns. Since each patient is only associated with one treatment type, filter to only keep the rows where `value` is `1`. 
2. Group by `treatment` and `ptid`, summarize to calculate the `gfr_slope` for each patient. 
3. Join the result with the new data set, `supp`. 

Remember that you will need to do some pre-join checks:

1. Which variables can you join on?
2. Do the data sets have any mismatched observations?
3. Perform any necessary data cleaning.
4. Check again as needed!

Work in the code chunk below. Save the result as `mdrd_tidy`.

```{r}
#| label: recreation-join

```

Run the following code chunk to test whether you have the same answer as the solution:

```{r}
#| label: compare
#| eval: false
waldo::compare(mdrd_tidy, solution, tolerance = 1e-4, ignore_attr = .groups)
```

## Extension

Using the code chunk below, investigate a research question about this data, using the skills you have learned this week and in previous weeks of Academy. Some ideas:

1. Create a visualization using the joined data from the milestone recreation. Use this visualization as the starting point for your own further investigation of the data. Use at least one data transformation step and one graph to start addressing your questions.
2. Now that treatment group is in a single column, how can you visualize differences between these treatment groups? For example, do the treatment groups exhibit differences in change in GFR over time? 
3. Now that you have supplementary demographic variables joined to the original data set, what additional patterns can you explore? For example, how does kidney function vary by age or sex?
4. [any other research question of interest]

Alternately, working with a data set of your own, complete the following:

1. Read in your data
2. Complete a data wrangling task relevant to your data (tidying and/or reshaping/pivoting your data); if appropriate, join your data with a second data set (filtering or mutating join)
3. Show summary tables of your data throughout these transformations


```{r}
#| label: extension

```
